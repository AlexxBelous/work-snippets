//Make section span full viewport width inside a centered container.
.section {
  padding-left: 1rem;
  padding-right: 1rem;
  width: 100vw;
  margin-left: calc(-50vw + 50%);
}


//stretches the line to the full width of the screen, ignoring containers

.section {
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(0px - ((100vw - 100%) / 2));
    width: 100vw;
    height: 1px;
    background: $dark-charcoal-color;
  }
}

//stretches the line to the full width of the screen, ignoring containers
.section {
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100vw;
    height: 1px;
    background: $dark-charcoal-color;
  }
}





/* Styles for a container with an image, ensuring fixed height, cropped content, and rounded corners with smooth filter transitions */
.wrapper-img {
  height: rem-calc(290);
  margin-bottom: rem-calc(30);
  overflow: hidden; /* Hides content exceeding container boundaries */

  img {
    width: 100%;
    height: 100%;
    max-width: none; /* Removes maximum width restriction */
    border-radius: rem-calc(12);
    object-fit: cover;
    display: block;

  }
}


/* Styles as a safeguard against image shifting in Gutenberg blocks */
.useful-tools {

  &__col-left, &__col-center, &__col-right {
    display: flex;
    flex-wrap: nowrap;
    overflow: hidden;
    align-items: center;
    gap: 1rem;
  }

  &__image-left,
  &__image-center,
  &__image-right {
    flex: 0 0 auto;
    width: rem-calc(65);
    height: rem-calc(64);
    margin: 0;

    img {
      width: 100%;
      height: 100%;
      display: block;
      object-fit: contain;
    }
  }
}




/* This calc(3% + #{$arrow-size} + #{$arrow-gap}) rule is used to position the Next button
 right after the Prev button.
 The formula takes the base offset from the edge (3%), adds the button width ($arrow-size),
 and the spacing ($arrow-gap).
 This way, the buttons donâ€™t overlap and always keep the same gap,
 even if the button size changes via the variable.
 */

$arrow-size: 40px; // arrow width/height
$arrow-gap: 8px;   // space between arrows

.slick-prev {
  left: 3%; // base offset from the edge
}

.slick-next {
  // place right after the prev button:
  left: calc(3% + #{$arrow-size} + #{$arrow-gap});
}

}
